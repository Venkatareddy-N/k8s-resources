install kubectl on linux server
=========================
curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.31.0/2024-09-12/bin/linux/amd64/kubectl

chmod +x ./kubectl

sudo mv kubectl /usr/local/bin/

kubectl version
Client Version: v1.31.0-eks-a737599
-----------------------------------

Resources
==========

namespace
----------
apiVersion:
kind: Namespace
metadata:
  name:
  labels:
spec:

apiVersion: v1
kind: Namespace
metadata: 
  name: expense
  labels:
    project: expense-project
    environment: dev

kubectl apply -f 01-namespace.yaml  --> to create namespace

kubectl get namespaces --> to check namespaces

kubectl delete -f 01-namespace.yaml --> to delect namespaces
------------------------------------------------------------

POD 
===
apiVersion: v1
kind: Pod
metadata:
  name: nginx-server
spec:
  containers:  # this is equals to docker run -d --name nginx-server nginx
  - name: nginx-server
    image: nginx


kubectl apply -f 02-pod.yaml

kubectl get pods
----------------

to enter into the pod
kubectl exec -it nginx-server -- bash
--------------------------------------

one pod have 2 containers
multi-container
===============

kind: Pod
apiVersion: v1
metadata:
  name: multi-container
spec:
  containers:
  - name: nginx-1
    image: nginx
  - name: almalinux-1
    image: almalinux:9
    command: ["sleep","1000"]

Error
====
CrashLoopBackOff --> with your command container not able to start, 

kubectl exec -it multi-container -c almalinux-1 -- bash --> enter to almalinux container

kubectl exec -it multi-container -c nginx-1 -- bash --> enter to nginx container
----------------------------------------------------------------------------------

LABELS
=======
kind: Pod
apiVersion: v1
metadata:
  name: labels
  labels:
    project: expense
    module: backend
    environment: dev
spec:
  containers:
  - name: nginx
    image: nginx

kubectl apply -f 04-labels.yaml --> to create pod

kubectl describe pod labels --> to check pod information in docker we use inspect
---------------------------------------------------------------------------------

Annotations
===========
Annotations we use urls, special commands
we can keep complex characters

kind: Pod
apiVersion: v1
metadata:
  name: annotations
  annotations:
    imageregistry: "https://hub.docker.com/"
    buildURL: "https://jenkins.joindevops.com/expense/backend/build/67"
spec:
  containers:
  - name: nginx
    image: nginx
----------------------------------------

environment variables
=====================
env in Dockerfile should rebuild if you change
env in manifest no need to rebuild, just restart is enough

apiVersion: v1
kind: Pod
metadata:
  name: env-demo
spec:
  containers:
  - name: nginx
    image: nginx
    env:
    - name: course
      value: devops
    - name: owner
      value: "siva kumar"


kubectl describe pod env-demo

kubectl exec -it env-demo -- bash
---------------------------------





